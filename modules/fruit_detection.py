import streamlit as st
import cv2
import numpy as np

def show():
    # Th√™m ph·∫ßn gi·ªõi thi·ªáu
    with st.expander("üîç Gi·ªõi thi·ªáu v·ªÅ nh·∫≠n d·∫°ng tr√°i c√¢y", expanded=False):
        st.markdown("""
        ### Gi·ªõi thi·ªáu v·ªÅ nh·∫≠n d·∫°ng tr√°i c√¢y
        
        T√≠nh nƒÉng nh·∫≠n d·∫°ng tr√°i c√¢y s·ª≠ d·ª•ng m√¥ h√¨nh YOLOv8 (You Only Look Once), m·ªôt trong nh·ªØng ph∆∞∆°ng ph√°p ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng hi·ªán ƒë·∫°i v√† hi·ªáu qu·∫£ nh·∫•t hi·ªán nay.
        
        #### Ki·∫øn tr√∫c YOLOv8
        
        YOLOv8 l√† phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa YOLO v·ªõi nhi·ªÅu c·∫£i ti·∫øn so v·ªõi c√°c phi√™n b·∫£n tr∆∞·ªõc:
        
        - **Backbone**: CSPDarknet v·ªõi c·∫£i ti·∫øn gi√∫p tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ªët h∆°n
        - **Neck**: PANet (Path Aggregation Network) c·∫£i ti·∫øn gi√∫p truy·ªÅn th√¥ng tin gi·ªØa c√°c t·∫ßng ƒë·∫∑c tr∆∞ng
        - **Head**: ƒê·∫ßu ra bao g·ªìm c√°c d·ª± ƒëo√°n v·ªÅ v·ªã tr√≠ (bounding box) v√† l·ªõp ƒë·ªëi t∆∞·ª£ng
        - **Loss Function**: CIoU (Complete IoU) cho d·ª± ƒëo√°n bounding box t·ªëi ∆∞u h∆°n
        
        #### Hu·∫•n luy·ªán cho nh·∫≠n d·∫°ng tr√°i c√¢y
        
        M√¥ h√¨nh ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n dataset tr√°i c√¢y v·ªõi 5 l·ªõp:
        1. Apple (T√°o)
        2. Banana (Chu·ªëi)
        3. Kiwi
        4. Orange (Cam)
        5. Pear (L√™)
        
        Qu√° tr√¨nh hu·∫•n luy·ªán ƒë∆∞·ª£c th·ª±c hi·ªán tr√™n Google Colab v·ªõi GPU ƒë·ªÉ tƒÉng t·ªëc, s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t:
        - Data augmentation (xoay, l·∫≠t, thay ƒë·ªïi m√†u s·∫Øc)
        - Transfer learning t·ª´ m√¥ h√¨nh pre-trained
        - Early stopping v√† model checkpointing
        
        #### ·ª®ng d·ª•ng trong th·ª±c t·∫ø
        
        Nh·∫≠n d·∫°ng tr√°i c√¢y c√≥ nhi·ªÅu ·ª©ng d·ª•ng th·ª±c t·∫ø:
        - H·ªá th·ªëng thanh to√°n t·ª± ƒë·ªông t·∫°i si√™u th·ªã
        - Ph√¢n lo·∫°i ch·∫•t l∆∞·ª£ng tr√°i c√¢y trong n√¥ng nghi·ªáp
        - H·ªó tr·ª£ robot thu ho·∫°ch trong n√¥ng nghi·ªáp th√¥ng minh
        - Ph√¢n t√≠ch dinh d∆∞·ª°ng t·ª± ƒë·ªông d·ª±a tr√™n nh·∫≠n d·∫°ng th·ª±c ph·∫©m
        """)
            
    # Th√™m ph·∫ßn h∆∞·ªõng d·∫´n
    with st.expander("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
        st.markdown("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        
        #### C√°ch s·ª≠ d·ª•ng t√≠nh nƒÉng nh·∫≠n d·∫°ng tr√°i c√¢y:
        
        1. **T·∫£i ·∫£nh l√™n**
           - Nh·∫•n n√∫t "Browse files" ƒë·ªÉ ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã c·ªßa b·∫°n
           - H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG, WEBP
           - K√≠ch th∆∞·ªõc ·∫£nh t·ªëi ∆∞u: 640x640 pixels
        
        2. **L·ª±a ch·ªçn th·∫ª**
           - S·ª≠ d·ª•ng menu ch·ªçn th·∫ª ƒë·ªÉ l·ªçc c√°c lo·∫°i tr√°i c√¢y b·∫°n mu·ªën hi·ªÉn th·ªã
           - C√≥ th·ªÉ ch·ªçn nhi·ªÅu lo·∫°i c√πng l√∫c
           - Ch·ªçn "T·∫•t c·∫£" ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ c√°c lo·∫°i tr√°i c√¢y ph√°t hi·ªán ƒë∆∞·ª£c
        
        3. **Xem k·∫øt qu·∫£ nh·∫≠n d·∫°ng**
           - ·∫¢nh g·ªëc s·∫Ω hi·ªÉn th·ªã b√™n tr√°i
           - ·∫¢nh k·∫øt qu·∫£ v·ªõi c√°c bounding box s·∫Ω hi·ªÉn th·ªã b√™n ph·∫£i
           - Th√¥ng tin v·ªÅ lo·∫°i tr√°i c√¢y v√† ƒë·ªô tin c·∫≠y s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi
        
        #### L∆∞u √Ω khi s·ª≠ d·ª•ng:
        
        - **√Ånh s√°ng**: ·∫¢nh ch·ª•p c·∫ßn c√≥ ƒë·ªß √°nh s√°ng ƒë·ªÉ nh·∫≠n di·ªán t·ªët
        - **G√≥c nh√¨n**: N√™n ch·ª•p tr√°i c√¢y ·ªü g√≥c nh√¨n r√µ r√†ng, kh√¥ng b·ªã che khu·∫•t
        - **Nhi·ªÅu ƒë·ªëi t∆∞·ª£ng**: M√¥ h√¨nh c√≥ th·ªÉ nh·∫≠n d·∫°ng nhi·ªÅu tr√°i c√¢y c√πng l√∫c trong m·ªôt ·∫£nh
        - **ƒê·ªô tin c·∫≠y**: K·∫øt qu·∫£ v·ªõi ƒë·ªô tin c·∫≠y (confidence) cao h∆°n ƒë√°ng tin c·∫≠y h∆°n
        
        #### M·∫πo c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c:
        
        - Ch·ª•p ·∫£nh r√µ n√©t, kh√¥ng b·ªã m·ªù
        - ƒê·∫∑t tr√°i c√¢y tr√™n n·ªÅn ƒë∆°n gi·∫£n, t∆∞∆°ng ph·∫£n v·ªõi m√†u c·ªßa tr√°i c√¢y
        - Tr√°nh ch·ª•p trong ƒëi·ªÅu ki·ªán √°nh s√°ng qu√° t·ªëi ho·∫∑c qu√° s√°ng
        - M·ªói ·∫£nh n√™n ch·ª©a t·ªëi ƒëa 10 tr√°i c√¢y ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t
        """)
            
    try:
        from utils.fruit_detection import FruitDetector
        fruit_detector = FruitDetector("models/fruit_detection.pt")
        has_fruit_detector = True
        
        # L·∫•y danh s√°ch c√°c lo·∫°i tr√°i c√¢y t·ª´ detector
        fruit_classes = list(fruit_detector.class_names.values())
    except Exception:
        has_fruit_detector = False
        fruit_classes = ["Apple", "Banana", "Kiwi", "Orange", "Pear"]
    
    if not has_fruit_detector:
        st.error("Model YOLOv8 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
        st.info("""
        **ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y, b·∫°n c·∫ßn:**
        1. Hu·∫•n luy·ªán model YOLOv8 theo h∆∞·ªõng d·∫´n trong README.md
        2. ƒê·∫∑t file `fruit_detection.pt` v√†o th∆∞ m·ª•c `models/`
        3. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
        """)
    else:
        # Th√™m widget ch·ªçn tag
        st.sidebar.markdown("### B·ªô l·ªçc lo·∫°i tr√°i c√¢y")
        
        # Kh·ªüi t·∫°o c√°c bi·∫øn session state n·∫øu ch∆∞a c√≥
        if 'selected_fruit_tags' not in st.session_state:
            st.session_state.selected_fruit_tags = fruit_classes.copy()
        
        # T·∫°o multiselect v·ªõi t·∫•t c·∫£ c√°c lo·∫°i tr√°i c√¢y
        selected_tags = st.sidebar.multiselect(
            "Ch·ªçn lo·∫°i tr√°i c√¢y c·∫ßn hi·ªÉn th·ªã:",
            options=fruit_classes,
            default=st.session_state.selected_fruit_tags,
            help="Ch·ªçn c√°c lo·∫°i tr√°i c√¢y b·∫°n mu·ªën hi·ªÉn th·ªã k·∫øt qu·∫£ nh·∫≠n d·∫°ng"
        )
        
        # C·∫≠p nh·∫≠t session state khi c√≥ thay ƒë·ªïi
        st.session_state.selected_fruit_tags = selected_tags
        
        # Th√™m n√∫t ch·ªçn/b·ªè ch·ªçn t·∫•t c·∫£
        col1, col2 = st.sidebar.columns(2)
        if col1.button("Ch·ªçn t·∫•t c·∫£"):
            st.session_state.selected_fruit_tags = fruit_classes.copy()
            st.rerun()
        if col2.button("B·ªè ch·ªçn t·∫•t c·∫£"):
            st.session_state.selected_fruit_tags = []
            st.rerun()
        
        uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh ch·ª©a tr√°i c√¢y", type=["jpg", "jpeg", "png", "webp", "jfif", "tif", "tiff"])
        
        if uploaded_file is not None:
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("·∫¢nh g·ªëc")
                st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), use_container_width=True)
            
            with st.spinner("ƒêang nh·∫≠n d·∫°ng tr√°i c√¢y..."):
                # Ph√°t hi·ªán t·∫•t c·∫£ tr√°i c√¢y
                boxes, labels, scores = fruit_detector.detect(img)
                
                # L·ªçc k·∫øt qu·∫£ theo c√°c tag ƒë√£ ch·ªçn
                if selected_tags:
                    filtered_indices = [i for i, label in enumerate(labels) if label in selected_tags]
                    filtered_boxes = boxes[filtered_indices] if len(filtered_indices) > 0 else np.array([])
                    filtered_labels = [labels[i] for i in filtered_indices]
                    filtered_scores = [scores[i] for i in filtered_indices]
                else:
                    # N·∫øu kh√¥ng c√≥ tag n√†o ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã ·∫£nh kh√¥ng c√≥ bounding box
                    filtered_boxes = np.array([])
                    filtered_labels = []
                    filtered_scores = []
                
                # V·∫Ω k·∫øt qu·∫£ ƒë√£ l·ªçc l√™n ·∫£nh
                result_img = fruit_detector.draw_results(img, filtered_boxes, filtered_labels, filtered_scores)
                
                with col2:
                    st.subheader("K·∫øt qu·∫£")
                    st.image(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB), use_container_width=True)
                
                # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ tr√°i c√¢y ƒë∆∞·ª£c ph√°t hi·ªán
                if len(boxes) > 0:
                    st.markdown("### Tr√°i c√¢y ph√°t hi·ªán ƒë∆∞·ª£c:")
                    
                    # T·∫°o b·∫£ng t√≥m t·∫Øt v·ªõi s·ªë l∆∞·ª£ng m·ªói lo·∫°i
                    summary = {}
                    for label in labels:
                        if label in summary:
                            summary[label] += 1
                        else:
                            summary[label] = 1
                    
                    # Hi·ªÉn th·ªã b·∫£ng t√≥m t·∫Øt
                    st.markdown("#### T√≥m t·∫Øt:")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Lo·∫°i tr√°i c√¢y**")
                        for label in summary:
                            st.markdown(f"- {label}")
                    with col2:
                        st.markdown("**S·ªë l∆∞·ª£ng**")
                        for label in summary:
                            count = summary[label]
                            if label in selected_tags:
                                st.markdown(f"- {count} (hi·ªÉn th·ªã)")
                            else:
                                st.markdown(f"- {count} (ƒë√£ l·ªçc)")
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt c√°c tr√°i c√¢y ƒë∆∞·ª£c l·ªçc
                    if filtered_boxes.size > 0:
                        st.markdown("#### Chi ti·∫øt tr√°i c√¢y ƒë∆∞·ª£c hi·ªÉn th·ªã:")
                        for i, (label, score) in enumerate(zip(filtered_labels, filtered_scores)):
                            st.write(f"**{i+1}.** {label} - ƒê·ªô tin c·∫≠y: {score:.2f}")
                    else:
                        if selected_tags:
                            st.warning(f"Kh√¥ng ph√°t hi·ªán lo·∫°i tr√°i c√¢y n√†o trong c√°c tag ƒë√£ ch·ªçn: {', '.join(selected_tags)}")
                        else:
                            st.warning("Kh√¥ng c√≥ lo·∫°i tr√°i c√¢y n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i tr√°i c√¢y.")
                else:
                    st.warning("Kh√¥ng ph√°t hi·ªán tr√°i c√¢y n√†o trong ·∫£nh!")