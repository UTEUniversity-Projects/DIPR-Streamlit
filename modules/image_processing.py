import streamlit as st
import cv2
import numpy as np
from PIL import Image
import io

@st.cache_resource
def load_image_processor():
    from utils.image_processing import ImageProcessor
    return ImageProcessor()

def show():
    # Section de introducci√≥n
    with st.expander("üîç Gi·ªõi thi·ªáu v·ªÅ x·ª≠ l√Ω ·∫£nh s·ªë", expanded=False):
        st.markdown("""
        ### Gi·ªõi thi·ªáu v·ªÅ x·ª≠ l√Ω ·∫£nh s·ªë
        
        T√≠nh nƒÉng x·ª≠ l√Ω ·∫£nh s·ªë t√≠ch h·ª£p c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω t·ª´ 3 ch∆∞∆°ng quan tr·ªçng trong lƒ©nh v·ª±c n√†y:
        
        #### Ch∆∞∆°ng 3: C√°c ph√©p to√°n ƒëi·ªÉm ·∫£nh
        X·ª≠ l√Ω h√¨nh ·∫£nh ·ªü m·ª©c pixel, √°p d·ª•ng c√°c bi·∫øn ƒë·ªïi to√°n h·ªçc cho t·ª´ng ƒëi·ªÉm ·∫£nh ri√™ng bi·ªát:
        - **Negative**: ƒê·∫£o √¢m b·∫£n ·∫£nh b·∫±ng c√°ch l·∫•y gi√° tr·ªã 255 - gi√° tr·ªã pixel
        - **Logarit/Gamma**: Bi·∫øn ƒë·ªïi phi tuy·∫øn ƒë·ªÉ tƒÉng c∆∞·ªùng chi ti·∫øt v√πng t·ªëi/s√°ng
        - **Histogram**: Ph√¢n t√≠ch v√† c√¢n b·∫±ng ph√¢n ph·ªëi c∆∞·ªùng ƒë·ªô m√†u trong ·∫£nh
        - **L√†m n√©t c·∫°nh**: TƒÉng c∆∞·ªùng chi ti·∫øt v√† vi·ªÅn b·∫±ng convolution
        
        #### Ch∆∞∆°ng 4: X·ª≠ l√Ω trong mi·ªÅn t·∫ßn s·ªë
        √Åp d·ª•ng bi·∫øn ƒë·ªïi Fourier ƒë·ªÉ x·ª≠ l√Ω ·∫£nh trong mi·ªÅn t·∫ßn s·ªë:
        - **Spectrum**: Hi·ªÉn th·ªã ph·ªï t·∫ßn s·ªë c·ªßa ·∫£nh
        - **L·ªçc th√¥ng cao/th·∫•p**: Lo·∫°i b·ªè nhi·ªÖu v√† m·∫´u l·∫∑p l·∫°i kh√¥ng mong mu·ªën
        - **Kh·ª≠ m·ªù chuy·ªÉn ƒë·ªông**: Ph·ª•c h·ªìi ·∫£nh b·ªã m·ªù do chuy·ªÉn ƒë·ªông
        
        #### Ch∆∞∆°ng 9: X·ª≠ l√Ω h√¨nh th√°i h·ªçc
        Thao t√°c v·ªõi h√¨nh d·∫°ng v√† c·∫•u tr√∫c c·ªßa ƒë·ªëi t∆∞·ª£ng trong ·∫£nh:
        - **Erosion (Co)**: Thu nh·ªè ƒë·ªëi t∆∞·ª£ng, lo·∫°i b·ªè chi ti·∫øt nh·ªè
        - **Dilation (Gi√£n)**: M·ªü r·ªông ƒë·ªëi t∆∞·ª£ng, l·∫•p ƒë·∫ßy l·ªó h·ªïng
        - **Ph√°t hi·ªán ƒë∆∞·ªùng bi√™n**: X√°c ƒë·ªãnh v√† hi·ªÉn th·ªã ƒë∆∞·ªùng vi·ªÅn c·ªßa ƒë·ªëi t∆∞·ª£ng
        
        C√°c ph∆∞∆°ng ph√°p n√†y c√≥ ·ª©ng d·ª•ng r·ªông r√£i trong:
        - X·ª≠ l√Ω ·∫£nh y t·∫ø v√† ph√¢n t√≠ch h√¨nh ·∫£nh khoa h·ªçc
        - C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ·∫£nh v√† kh√¥i ph·ª•c ·∫£nh
        - Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng cho h·ªá th·ªëng th·ªã gi√°c m√°y t√≠nh
        - X·ª≠ l√Ω ti·ªÅn ·∫£nh cho c√°c thu·∫≠t to√°n AI
        """)
            
    # Section de instrucciones
    with st.expander("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
        st.markdown("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        
        #### C√°ch th·ª±c hi·ªán x·ª≠ l√Ω ·∫£nh:
        
        1. **Ch·ªçn ch∆∞∆°ng x·ª≠ l√Ω**
           - Ch∆∞∆°ng 3: X·ª≠ l√Ω ƒëi·ªÉm ·∫£nh (ƒêi·ªÉm ·∫¢nh)
           - Ch∆∞∆°ng 4: X·ª≠ l√Ω t·∫ßn s·ªë
           - Ch∆∞∆°ng 9: X·ª≠ l√Ω h√¨nh th√°i
        
        2. **Ch·ªçn ph√©p to√°n**
           - M·ªói ch∆∞∆°ng s·∫Ω hi·ªÉn th·ªã danh s√°ch c√°c ph√©p to√°n c√≥ th·ªÉ √°p d·ª•ng
           - Ch·ªçn m·ªôt ph√©p to√°n ph√π h·ª£p v·ªõi nhu c·∫ßu x·ª≠ l√Ω c·ªßa b·∫°n
        
        3. **T·∫£i ·∫£nh l√™n**
           - Nh·∫•n "Browse files" ƒë·ªÉ t·∫£i ·∫£nh t·ª´ thi·∫øt b·ªã
           - H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG, TIF, TIFF
           - ·∫¢nh s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n tr√°i m√†n h√¨nh
        
        4. **Xem k·∫øt qu·∫£ v√† t·∫£i xu·ªëng**
           - K·∫øt qu·∫£ x·ª≠ l√Ω s·∫Ω hi·ªÉn th·ªã b√™n ph·∫£i
           - Nh·∫•n "T·∫£i xu·ªëng k·∫øt qu·∫£" ƒë·ªÉ l∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
           - Ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i xu·ªëng: JPG, PNG ho·∫∑c TIFF
        """)
            
    image_processor = load_image_processor()
    available_functions = image_processor.get_available_functions()
    
    chapter = st.sidebar.selectbox("Ch·ªçn ch∆∞∆°ng", ["3", "4", "9"])
    
    chapter_key = f"Chapter {chapter} - " + {
        "3": "ƒêi·ªÉm ·∫¢nh",
        "4": "X·ª≠ l√Ω t·∫ßn s·ªë",
        "9": "X·ª≠ l√Ω h√¨nh th√°i"
    }[chapter]
    
    functions = available_functions[chapter_key]
    func_names = [f["name"] for f in functions]
    func_descriptions = {f["name"]: f["description"] for f in functions}
    
    selected_func = st.sidebar.selectbox(
        "Ch·ªçn ph√©p to√°n",
        func_names,
        format_func=lambda x: f"{x} - {func_descriptions[x]}"
    )
    
    # Th√™m h·ªó tr·ª£ cho ƒë·ªãnh d·∫°ng TIFF
    uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh ƒë·ªÉ x·ª≠ l√Ω", type=["jpg", "jpeg", "png", "webp", "jfif", "tif", "tiff"])
    
    if uploaded_file is not None:
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        file_extension = uploaded_file.name.lower().split('.')[-1]
        
        if file_extension in ['tif', 'tiff']:
            # ƒê·ªçc file TIFF b·∫±ng PIL v√† chuy·ªÉn sang OpenCV
            img = Image.open(uploaded_file)
            # Chuy·ªÉn ƒë·ªïi PIL image sang OpenCV format (PIL l√† RGB, OpenCV l√† BGR)
            img_np = np.array(img)
            
            # Ki·ªÉm tra s·ªë k√™nh m√†u
            if len(img_np.shape) == 3 and img_np.shape[2] == 3:
                # ·∫¢nh RGB, chuy·ªÉn sang BGR cho OpenCV
                img_cv = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)
            elif len(img_np.shape) == 3 and img_np.shape[2] == 4:
                # ·∫¢nh RGBA, chuy·ªÉn sang BGR cho OpenCV
                img_cv = cv2.cvtColor(img_np, cv2.COLOR_RGBA2BGR)
            else:
                # ·∫¢nh grayscale, gi·ªØ nguy√™n
                img_cv = img_np
        else:
            # ƒê·ªçc file kh√¥ng ph·∫£i TIFF b·∫±ng OpenCV
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            img_cv = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("·∫¢nh g·ªëc")
            # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB tr∆∞·ªõc khi hi·ªÉn th·ªã v·ªõi Streamlit
            if len(img_cv.shape) == 3 and img_cv.shape[2] == 3:
                display_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
                st.image(display_img, use_container_width=True)
            else:
                # ·∫¢nh grayscale, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi
                st.image(img_cv, use_container_width=True)
        
        with st.spinner(f"ƒêang √°p d·ª•ng {selected_func}..."):
            try:
                if selected_func in ["NegativeColor", "HistEqualColor"]:
                    processed_img = image_processor.process(img_cv, chapter, selected_func)
                else:
                    if len(img_cv.shape) == 3:
                        gray_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
                    else:
                        gray_img = img_cv
                    processed_img = image_processor.process(gray_img, chapter, selected_func)
                
                with col2:
                    st.subheader("K·∫øt qu·∫£")
                    # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£ t√πy thu·ªôc v√†o lo·∫°i ·∫£nh
                    if len(processed_img.shape) == 2:  # ·∫¢nh x√°m
                        st.image(processed_img, use_container_width=True)
                    else:  # ·∫¢nh m√†u (BGR)
                        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB ƒë·ªÉ hi·ªÉn th·ªã v·ªõi Streamlit
                        display_processed = cv2.cvtColor(processed_img, cv2.COLOR_BGR2RGB)
                        st.image(display_processed, use_container_width=True)
                
                if st.button("T·∫£i xu·ªëng k·∫øt qu·∫£"):
                    # T√πy ch·ªçn ƒë·ªãnh d·∫°ng khi t·∫£i xu·ªëng
                    download_format = st.select_slider(
                        "Ch·ªçn ƒë·ªãnh d·∫°ng:",
                        options=['JPG', 'PNG', 'TIFF'],
                        value='JPG'
                    )
                    
                    # T·∫£i xu·ªëng v·ªõi ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c ch·ªçn
                    if download_format == 'TIFF':
                        # Chuy·ªÉn ƒë·ªïi v√† l∆∞u l√† TIFF
                        if len(processed_img.shape) == 2:
                            # ·∫¢nh grayscale
                            pil_img = Image.fromarray(processed_img)
                        else:
                            # ·∫¢nh BGR, chuy·ªÉn sang RGB cho PIL
                            pil_img = Image.fromarray(cv2.cvtColor(processed_img, cv2.COLOR_BGR2RGB))
                        
                        buf = io.BytesIO()
                        pil_img.save(buf, format='TIFF')
                        tiff_data = buf.getvalue()
                        
                        st.download_button(
                            label=f"Download {download_format}",
                            data=tiff_data,
                            file_name=f"processed_{selected_func}.tiff",
                            mime="image/tiff"
                        )
                    else:
                        # L∆∞u JPG ho·∫∑c PNG
                        ext = '.jpg' if download_format == 'JPG' else '.png'
                        
                        # OpenCV l∆∞u file tr·ª±c ti·∫øp ·ªü ƒë·ªãnh d·∫°ng BGR
                        _, buffer = cv2.imencode(ext, processed_img)
                        
                        st.download_button(
                            label=f"Download {download_format}",
                            data=buffer.tobytes(),
                            file_name=f"processed_{selected_func}{ext}",
                            mime=f"image/{download_format.lower()}"
                        )
                    
            except Exception as e:
                st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}")