import streamlit as st
import cv2
import numpy as np
import os

def show():
    # Add introduction section
    with st.expander("üîç Gi·ªõi thi·ªáu v·ªÅ nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t", expanded=False):
        st.markdown("""
        ### Gi·ªõi thi·ªáu v·ªÅ nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t
        
        T√≠nh nƒÉng nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t s·ª≠ d·ª•ng m√¥ h√¨nh YOLOv8, m·ªôt trong nh·ªØng m√¥ h√¨nh ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng hi·ªáu qu·∫£ nh·∫•t hi·ªán nay. M√¥ h√¨nh ƒë∆∞·ª£c ƒë√†o t·∫°o ƒë·ªÉ nh·∫≠n di·ªán nhi·ªÅu lo√†i ƒë·ªông v·∫≠t kh√°c nhau trong ·∫£nh.
        
        #### Ki·∫øn tr√∫c YOLOv8
        
        YOLOv8 (You Only Look Once version 8) l√† phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa d√≤ng m√¥ h√¨nh YOLO v·ªõi nhi·ªÅu c·∫£i ti·∫øn:
        
        - **Backbone**: Hi·ªáu qu·∫£ h∆°n v·ªõi CSPDarknet ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
        - **Neck**: C·∫£i ti·∫øn FPN (Feature Pyramid Network) gi√∫p nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng ·ªü nhi·ªÅu k√≠ch th∆∞·ªõc
        - **Head**: ƒê·∫ßu ra anchor-free gi√∫p tƒÉng ƒë·ªô ch√≠nh x√°c
        - **Loss Function**: H√†m m·∫•t m√°t ƒë∆∞·ª£c c·∫£i ti·∫øn gi√∫p ph√¢n lo·∫°i v√† x√°c ƒë·ªãnh v·ªã tr√≠ t·ªët h∆°n
        
        #### Kh·∫£ nƒÉng nh·∫≠n d·∫°ng
        
        M√¥ h√¨nh c√≥ th·ªÉ nh·∫≠n di·ªán nhi·ªÅu lo√†i ƒë·ªông v·∫≠t ph·ªï bi·∫øn nh∆∞:
        - Ch√≥ (Dog)
        - M√®o (Cat)
        - Chim (Bird)
        - Ng·ª±a (Horse)
        - B√≤ (Cow)
        - Voi (Elephant)
        - G·∫•u (Bear)
        - Ng·ª±a v·∫±n (Zebra)
        - H∆∞∆°u cao c·ªï (Giraffe)
        - H·ªï (Tiger)
        
        #### ·ª®ng d·ª•ng th·ª±c t·∫ø
        
        Nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t c√≥ nhi·ªÅu ·ª©ng d·ª•ng quan tr·ªçng:
        - Theo d√µi v√† b·∫£o t·ªìn ƒë·ªông v·∫≠t hoang d√£
        - Nghi√™n c·ª©u h√†nh vi ƒë·ªông v·∫≠t
        - H·ªá th·ªëng gi√°m s√°t t·ª± ƒë·ªông trong v∆∞·ªùn th√∫ ho·∫∑c c√¥ng vi√™n t·ª± nhi√™n
        - Ph√°t hi·ªán ƒë·ªông v·∫≠t x√¢m nh·∫≠p khu v·ª±c ƒë√¥ th·ªã
        - H·ªó tr·ª£ qu·∫£n l√Ω trang tr·∫°i v√† chƒÉn nu√¥i
        """)
            
    # Add usage instructions
    with st.expander("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
        st.markdown("""
        ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        
        #### C√°ch s·ª≠ d·ª•ng t√≠nh nƒÉng nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t:
        
        1. **T·∫£i ·∫£nh l√™n**
           - Nh·∫•n n√∫t "Browse files" ƒë·ªÉ ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã c·ªßa b·∫°n
           - H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG, WEBP
           - ·∫¢nh c√≥ th·ªÉ ch·ª©a m·ªôt ho·∫∑c nhi·ªÅu ƒë·ªông v·∫≠t
        
        2. **Ch·ªçn th·∫ª ph√¢n lo·∫°i**
           - S·ª≠ d·ª•ng menu ch·ªçn th·∫ª ƒë·ªÉ l·ªçc c√°c lo√†i ƒë·ªông v·∫≠t b·∫°n mu·ªën hi·ªÉn th·ªã
           - C√≥ th·ªÉ ch·ªçn nhi·ªÅu lo√†i c√πng l√∫c
           - Ch·ªçn "T·∫•t c·∫£" ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ c√°c lo√†i ƒë·ªông v·∫≠t ph√°t hi·ªán ƒë∆∞·ª£c
        
        3. **Xem k·∫øt qu·∫£ nh·∫≠n d·∫°ng**
           - ·∫¢nh g·ªëc s·∫Ω hi·ªÉn th·ªã b√™n tr√°i
           - ·∫¢nh k·∫øt qu·∫£ v·ªõi c√°c khung ƒë√°nh d·∫•u ƒë·ªông v·∫≠t ƒë∆∞·ª£c l·ªçc s·∫Ω hi·ªÉn th·ªã b√™n ph·∫£i
           - Th√¥ng tin v·ªÅ lo√†i ƒë·ªông v·∫≠t v√† ƒë·ªô tin c·∫≠y s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi
        
        #### L∆∞u √Ω khi s·ª≠ d·ª•ng:
        
        - **√Ånh s√°ng**: ·∫¢nh ch·ª•p c·∫ßn c√≥ ƒë·ªß √°nh s√°ng ƒë·ªÉ nh·∫≠n di·ªán t·ªët
        - **G√≥c nh√¨n**: M√¥ h√¨nh ho·∫°t ƒë·ªông t·ªët nh·∫•t khi ƒë·ªông v·∫≠t ƒë∆∞·ª£c nh√¨n th·∫•y r√µ r√†ng
        - **Hi·ªáu su·∫•t**: M√¥ h√¨nh c√≥ th·ªÉ nh·∫≠n di·ªán nhi·ªÅu ƒë·ªông v·∫≠t c√πng l√∫c trong m·ªôt ·∫£nh
        - **Gi·ªõi h·∫°n**: Hi·ªáu qu·∫£ nh·∫•t v·ªõi ƒë·ªông v·∫≠t ph·ªï bi·∫øn v√† trong ƒëi·ªÅu ki·ªán √°nh s√°ng t·ªët
        
        #### M·∫πo c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c:
        
        - Ch·ª•p ·∫£nh trong ƒëi·ªÅu ki·ªán √°nh s√°ng t·ªët
        - ƒê·∫£m b·∫£o ƒë·ªông v·∫≠t chi·∫øm ph·∫ßn ƒë√°ng k·ªÉ trong khung h√¨nh
        - Tr√°nh c√°c v·∫≠t th·ªÉ che khu·∫•t qu√° nhi·ªÅu
        - N·∫øu c√≥ nhi·ªÅu ƒë·ªông v·∫≠t, c·ªë g·∫Øng ƒë·ªÉ ch√∫ng kh√¥ng ch·ªìng l·∫•n qu√° nhi·ªÅu
        """)
    
    # Define specific animal classes we want to support for filtering
    animal_classes = ["dog", "cat", "bird", "horse", "cow", "elephant", "bear", "zebra", "giraffe", "tiger"]
    
    # Check if model exists
    model_exists = False
    animal_detector = None
    model_path = "models/animal_detection.pt"
    
    if os.path.exists(model_path):
        try:
            from utils.animal_detection import AnimalDetector
            animal_detector = AnimalDetector(model_path)
            model_exists = True
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i model YOLOv8: {str(e)}")
            model_exists = False
    
    if not model_exists:
        st.error("Model YOLOv8 cho nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
        st.info("""
        **ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y, b·∫°n c·∫ßn:**
        1. T·∫£i model YOLOv8 ƒë∆∞·ª£c ƒë√†o t·∫°o cho nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t
        2. ƒê·∫∑t file model v√†o th∆∞ m·ª•c `models/` v·ªõi t√™n `animal_detection.pt`
        3. Ho·∫∑c s·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ t·∫£i model t·ª´ Roboflow:
        ```
        from roboflow import Roboflow
        rf = Roboflow(api_key="API_KEY")
        project = rf.workspace("project_name").project("animal-detection")
        model = project.version(1).model
        model.save("models/animal_detection.pt")
        ```
        4. B·∫°n c≈©ng c√≥ th·ªÉ s·ª≠ d·ª•ng script `scripts/download_animal_model.py` ƒë·ªÉ t·∫£i model c∆° b·∫£n:
        ```
        python scripts/download_animal_model.py
        ```
        5. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
        """)
        
    # Kh·ªüi t·∫°o c√°c bi·∫øn session state n·∫øu ch∆∞a c√≥
    if 'selected_animal_tags' not in st.session_state:
        st.session_state.selected_animal_tags = animal_classes.copy()
        
    # Th√™m widget ch·ªçn tag v√†o sidebar
    st.sidebar.markdown("### B·ªô l·ªçc lo√†i ƒë·ªông v·∫≠t")
    
    # T·∫°o multiselect v·ªõi t·∫•t c·∫£ c√°c lo√†i ƒë·ªông v·∫≠t
    selected_tags = st.sidebar.multiselect(
        "Ch·ªçn lo√†i ƒë·ªông v·∫≠t c·∫ßn hi·ªÉn th·ªã:",
        options=animal_classes,
        default=st.session_state.selected_animal_tags,
        help="Ch·ªçn c√°c lo√†i ƒë·ªông v·∫≠t b·∫°n mu·ªën hi·ªÉn th·ªã k·∫øt qu·∫£ nh·∫≠n d·∫°ng"
    )
    
    # C·∫≠p nh·∫≠t session state khi c√≥ thay ƒë·ªïi
    st.session_state.selected_animal_tags = selected_tags
    
    # Th√™m n√∫t ch·ªçn/b·ªè ch·ªçn t·∫•t c·∫£
    col1, col2 = st.sidebar.columns(2)
    if col1.button("Ch·ªçn t·∫•t c·∫£", key="select_all_animals"):
        st.session_state.selected_animal_tags = animal_classes.copy()
        st.rerun()
    if col2.button("B·ªè ch·ªçn t·∫•t c·∫£", key="deselect_all_animals"):
        st.session_state.selected_animal_tags = []
        st.rerun()
    
    if model_exists:
        # Upload image
        uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh ch·ª©a ƒë·ªông v·∫≠t", type=["jpg", "jpeg", "png", "webp", "jfif", "tif", "tiff"])
        
        if uploaded_file is not None:
            # Safe image loading with error handling
            try:
                # Read image as bytes
                file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
                
                # Check if file_bytes is not empty
                if len(file_bytes) == 0:
                    st.error("File t·∫£i l√™n r·ªóng ho·∫∑c b·ªã l·ªói.")
                else:
                    # Decode image
                    img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
                    
                    # Check if image was decoded successfully
                    if img is None or img.size == 0:
                        st.error("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh. ƒê·ªãnh d·∫°ng file c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
                    else:
                        # Create two columns for original and result images
                        col1, col2 = st.columns(2)
                        
                        # Display original image
                        with col1:
                            st.subheader("·∫¢nh g·ªëc")
                            st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), use_container_width=True)
                        
                        # Process image
                        with st.spinner("ƒêang nh·∫≠n d·∫°ng ƒë·ªông v·∫≠t..."):
                            try:
                                # Ph√°t hi·ªán t·∫•t c·∫£ ƒë·ªông v·∫≠t
                                boxes, labels, scores = animal_detector.detect(img)
                                
                                # L·ªçc k·∫øt qu·∫£ theo c√°c tag ƒë√£ ch·ªçn, ch·ªâ gi·ªØ l·∫°i c√°c nh√£n thu·ªôc animal_classes
                                valid_labels = []
                                valid_indices = []
                                
                                for i, label in enumerate(labels):
                                    # Ki·ªÉm tra xem nh√£n c√≥ thu·ªôc 10 lo·∫°i ƒë·ªông v·∫≠t ƒë√£ ƒë·ªãnh nghƒ©a kh√¥ng
                                    if label in animal_classes:
                                        valid_labels.append(label)
                                        valid_indices.append(i)
                                
                                # L·∫•y ch·ªâ c√°c k·∫øt qu·∫£ h·ª£p l·ªá
                                if valid_indices:
                                    valid_boxes = boxes[valid_indices]
                                    valid_scores = [scores[i] for i in valid_indices]
                                else:
                                    valid_boxes = np.array([])
                                    valid_scores = []
                                
                                # L·ªçc ti·∫øp d·ª±a tr√™n tag ƒë√£ ch·ªçn
                                if selected_tags and valid_indices:
                                    filtered_indices = [i for i, label in enumerate(valid_labels) if label in selected_tags]
                                    filtered_boxes = valid_boxes[filtered_indices] if len(filtered_indices) > 0 else np.array([])
                                    filtered_labels = [valid_labels[i] for i in filtered_indices]
                                    filtered_scores = [valid_scores[i] for i in filtered_indices]
                                else:
                                    # N·∫øu kh√¥ng c√≥ tag n√†o ƒë∆∞·ª£c ch·ªçn, hi·ªÉn th·ªã ·∫£nh kh√¥ng c√≥ bounding box
                                    filtered_boxes = np.array([])
                                    filtered_labels = []
                                    filtered_scores = []
                                
                                # V·∫Ω k·∫øt qu·∫£ ƒë√£ l·ªçc l√™n ·∫£nh
                                result_img = animal_detector.draw_results(img, filtered_boxes, filtered_labels, filtered_scores)
                                
                                # Display result
                                with col2:
                                    st.subheader("K·∫øt qu·∫£")
                                    st.image(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB), use_container_width=True)
                                
                                # Hi·ªÉn th·ªã th√¥ng tin
                                if len(valid_labels) > 0:
                                    st.markdown("### ƒê·ªông v·∫≠t ƒë√£ ph√°t hi·ªán:")
                                    
                                    # T·∫°o b·∫£ng t√≥m t·∫Øt v·ªõi s·ªë l∆∞·ª£ng m·ªói lo·∫°i
                                    animal_count = {}
                                    for label in valid_labels:
                                        if label in animal_count:
                                            animal_count[label] += 1
                                        else:
                                            animal_count[label] = 1
                                    
                                    # Hi·ªÉn th·ªã b·∫£ng t√≥m t·∫Øt
                                    st.markdown("#### T√≥m t·∫Øt:")
                                    col_count = 3  # S·ªë c·ªôt trong l∆∞·ªõi
                                    cols = st.columns(col_count)
                                    
                                    # Hi·ªÉn th·ªã t·ªïng quan c√°c lo√†i ƒë·ªông v·∫≠t
                                    for i, (label, count) in enumerate(animal_count.items()):
                                        with cols[i % col_count]:
                                            # Th√™m emoji d·ª±a v√†o lo√†i ƒë·ªông v·∫≠t
                                            emoji = "üêæ"  # M·∫∑c ƒë·ªãnh
                                            if label.lower() == "dog":
                                                emoji = "üêï"
                                            elif label.lower() == "cat":
                                                emoji = "üêà"
                                            elif label.lower() == "bird":
                                                emoji = "üê¶"
                                            elif label.lower() == "horse":
                                                emoji = "üêé"
                                            elif label.lower() == "cow":
                                                emoji = "üêÑ"
                                            elif label.lower() == "elephant":
                                                emoji = "üêò"
                                            elif label.lower() == "bear":
                                                emoji = "üêª"
                                            elif label.lower() == "zebra":
                                                emoji = "ü¶ì"
                                            elif label.lower() == "giraffe":
                                                emoji = "ü¶í"
                                            elif label.lower() == "tiger":
                                                emoji = "üêÖ"
                                            
                                            # Hi·ªÉn th·ªã v·ªõi tr·∫°ng th√°i l·ªçc
                                            status = " (hi·ªÉn th·ªã)" if label in selected_tags else " (ƒë√£ l·ªçc)"
                                            st.markdown(f"**{emoji} {label}:** {count}{status}")
                                    
                                    # Hi·ªÉn th·ªã chi ti·∫øt c√°c ƒë·ªông v·∫≠t ƒë√£ l·ªçc
                                    if filtered_boxes.size > 0:
                                        st.markdown("#### Chi ti·∫øt ƒë·ªông v·∫≠t ƒë∆∞·ª£c hi·ªÉn th·ªã:")
                                        # Create a nice looking grid for animal results
                                        col_count = 3  # Number of columns in the grid
                                        display_cols = st.columns(col_count)
                                        
                                        # Display each detected animal with details
                                        for i, (label, score) in enumerate(zip(filtered_labels, filtered_scores)):
                                            with display_cols[i % col_count]:
                                                st.markdown(f"**{i+1}. {label}**")
                                                st.markdown(f"ƒê·ªô tin c·∫≠y: {score:.2f}")
                                                
                                                # Add emoji based on animal type
                                                emoji = "üêæ"  # Default
                                                if label.lower() == "dog":
                                                    emoji = "üêï"
                                                elif label.lower() == "cat":
                                                    emoji = "üêà"
                                                elif label.lower() == "bird":
                                                    emoji = "üê¶"
                                                elif label.lower() == "horse":
                                                    emoji = "üêé"
                                                elif label.lower() == "cow":
                                                    emoji = "üêÑ"
                                                elif label.lower() == "elephant":
                                                    emoji = "üêò"
                                                elif label.lower() == "bear":
                                                    emoji = "üêª"
                                                elif label.lower() == "zebra":
                                                    emoji = "ü¶ì"
                                                elif label.lower() == "giraffe":
                                                    emoji = "ü¶í"
                                                elif label.lower() == "tiger":
                                                    emoji = "üêÖ"
                                                
                                                st.markdown(f"{emoji} {label}")
                                    else:
                                        if selected_tags:
                                            st.warning(f"Kh√¥ng ph√°t hi·ªán lo√†i ƒë·ªông v·∫≠t n√†o trong c√°c tag ƒë√£ ch·ªçn: {', '.join(selected_tags)}")
                                        else:
                                            st.warning("Kh√¥ng c√≥ lo√†i ƒë·ªông v·∫≠t n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo√†i.")
                                    
                                    # Display summary if there are matches
                                    if len(filtered_labels) > 0:
                                        st.markdown("### T·ªïng k·∫øt:")
                                        filtered_summary = {}
                                        for label in filtered_labels:
                                            if label in filtered_summary:
                                                filtered_summary[label] += 1
                                            else:
                                                filtered_summary[label] = 1
                                        
                                        summary_text = ", ".join([f"**{count} {label}**" for label, count in filtered_summary.items()])
                                        st.markdown(f"ƒê√£ ph√°t hi·ªán v√† hi·ªÉn th·ªã {summary_text} trong ·∫£nh.")
                                else:
                                    st.warning("Kh√¥ng ph√°t hi·ªán ƒë·ªông v·∫≠t n√†o trong ·∫£nh!")
                                    st.markdown("""
                                    **G·ª£i √Ω:**
                                    - Th·ª≠ t·∫£i l√™n ·∫£nh kh√°c c√≥ ƒë·ªông v·∫≠t r√µ r√†ng h∆°n
                                    - ƒê·∫£m b·∫£o ƒë·ªông v·∫≠t kh√¥ng b·ªã che khu·∫•t qu√° nhi·ªÅu
                                    - Ch·ªçn ·∫£nh c√≥ ƒëi·ªÅu ki·ªán √°nh s√°ng t·ªët h∆°n
                                    """)
                            except Exception as e:
                                st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
                                st.info("Th·ª≠ t·∫£i l√™n ·∫£nh kh√°c ho·∫∑c ki·ªÉm tra l·∫°i model v√† th∆∞ vi·ªán.")
                                
            except Exception as e:
                st.error(f"L·ªói khi x·ª≠ l√Ω file: {str(e)}")
                st.info("Vui l√≤ng th·ª≠ l·∫°i v·ªõi file ·∫£nh kh√°c.")